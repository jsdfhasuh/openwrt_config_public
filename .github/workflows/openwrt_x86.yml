#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-x86-build

on:
  push:
    branches:
      - main
    paths:
      - 'x86.config'
      - 'feeds.conf'
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'false'
        type: choice
        options:
        - "true"
        - "false"
      debug:
        description: 'Debug mode'
        required: true
        default: 'false'
        type: choice
        options:
        - "true"
        - "false"

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-24.04
    if: github.event.repository.owner.id == github.event.sender.id
    permissions: write-all
    env:
      DEPENDENCIES: "build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget"
      REPO_BRANCH: main
      BUILD_OPENWRT: ${{ github.workspace }}/openwrt_source_code
      BUILD_ROOT: ${{ github.workspace }}
      openwrt_files: ${{ github.workspace }}/openwrt_files
      TZ: Asia/Shanghai
      DEVICE_NAME: unknown
      FILE_DATE: unknown
      FIRMWARE: unknown
      Architecture: amd64
    steps:
      - name: test debug
        if: github.event.inputs.debug == 'false'
        run: |
          echo "debug mode"
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
      - name: Check environment
        run: |
          echo "TZ=$TZ"
          echo "DEPENDENCIES=$DEPENDENCIES"
          echo "BUILD_OPENWRT=$BUILD_OPENWRT"
          echo "DEVICE_NAME=$DEVICE_NAME"
          echo "FILE_DATE=$FILE_DATE"
          echo "FIRMWARE=$FIRMWARE"
        
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get update && sudo apt-get upgrade
          sudo apt-get -qq install antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync rename scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev rename pigz libfuse-dev upx subversion
          sudo -E apt-get -qq autoremove --purge
          sudo apt-get -qq clean
          echo "================================================="
          echo "文件系统        类型   容量  已用  可用 使用% 挂载点"
          df -hT $PWD
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /$BUILD_OPENWRT
          sudo chown $USER:$GROUPS $BUILD_OPENWRT

      - name: Checkout
        uses: actions/checkout@main

      - name: test custom.sh
        run: |
          cd $BUILD_ROOT
          echo "test custom.sh"
          bash custom.sh $ARCHITECTURE $BUILD_ROOT
      
      - name: PULL Openwrt Source Code
        run: |
          git clone https://github.com/openwrt/openwrt.git $BUILD_OPENWRT
          ls -al $BUILD_OPENWRT

      - name: move_custom_files
        run: |
          mv $openwrt_files $BUILD_OPENWRT/files

      - name: Start SSH via tmate
        uses: rdp-studio/ssh2actions@main
        if: github.event.inputs.ssh == 'true'


      - name: Install mosdns
        run: |
          cd $BUILD_OPENWRT
          echo "src-git mosdns"
          rm -rf feeds/packages/net/v2ray-geodata
          git clone https://github.com/sbwml/luci-app-mosdns -b v5 package/mosdns
          git clone https://github.com/sbwml/v2ray-geodata package/v2ray-geodata
          ls "package/mosdns"
          echo "src-git mosdns success"

      - name: Install luci-app-adguardhome
        run: |
          cd $BUILD_OPENWRT
          echo "src-git adguardhome"
          git clone https://github.com/rufengsuixing/luci-app-adguardhome package/luci-app-adguardhome
      
      - name: Install turboacc
        run: |
          echo "src-git turboacc"
          cd $BUILD_OPENWRT
          curl -sSL https://raw.githubusercontent.com/chenmozhijin/turboacc/luci/add_turboacc.sh -o add_turboacc.sh && bash add_turboacc.sh
          ls "package/turboacc"


      - name: Install custom feeds and config
        run: |
            cd $BUILD_ROOT
            mv feeds.conf $BUILD_OPENWRT/feeds.conf
      
      - name: Change ash to bash
        run: |
            cd $BUILD_OPENWRT
            sed -i 's/ash/bash/g' package/base-files/files/etc/shells
            sed -i 's/ash/bash/g' package/base-files/files/etc/passwd


      - name: Update feeds
        run: |
          cd $BUILD_OPENWRT
          ./scripts/feeds update -a 
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          cd $BUILD_OPENWRT
          cat $BUILD_ROOT/x86.config > .config
          make oldconfig

      - name: Make download
        run: |
          cd $BUILD_OPENWRT
          make download -j8 V=s
          df -h

      - name: Build the firmware image
        id: compile
        if: github.event.inputs.debug == 'false'
        run: |
          cd $BUILD_OPENWRT && echo "$(($(nproc)+1)) thread compile"
          make prepare -j$(($(nproc)+1)) 
          make package/feeds/luci/luci-base/compile V=s
          make -j$(($(nproc)+1)) world V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Build the firmware image DEBUG
        id: compile_debug
        if: github.event.inputs.debug == 'true'
        run: |
          cd $BUILD_OPENWRT && echo "DEBUG compile"
          make prepare -j1
          make package/feeds/luci/luci-base/compile V=s
          make -j1 world V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success'
        with:
          name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: ${{ env.BUILD_OPENWRT }}/bin

      - name: Organize files
        id: organize
        run: |
          cd $BUILD_OPENWRT/bin/targets/*/* && rm -rf packages
          { echo '### SHA256SUMS'; echo '```txt'; cat sha256sums; echo '```'; } > $BUILD_OPENWRT/SHA256SUMS
          echo "FIRMWARE=$PWD"
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
 
      - name: Generate stable Release Tag
        id: stabletag
        run: |
          echo "release_tag=$(cd $BUILD_OPENWRT && git describe --tags --abbrev=0 --exact-match)_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Generate snapshot Release Tag
        id: snapshottag 
        run: |
          echo "release_tag=SNAPSHOT_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload stable firmware to Release
        uses: softprops/action-gh-release@master
        if: steps.stabletag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          tag_name: ${{ steps.stabletag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*
          body_path: ${{ env.BUILD_OPENWRT }}/SHA256SUMS

      - name: Upload snapshot firmware to Release
        uses: softprops/action-gh-release@master
        if: steps.snapshottag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          tag_name: ${{ steps.snapshottag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*
          body_path: ${{ env.BUILD_OPENWRT }}/SHA256SUMS

      - name: Delete workflow runs
        if: always()
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 30
          keep_minimum_runs: 5

      - name: Remove old Releases
        if: always()
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}